进程同步：
添加锁，若没有进程锁，在Linux 系统上输出时，因为多进程争取输出设备而使输出异常。

进程池：
（1）#回调函数接受的参数将是调运函数的返回值。
（2）#进程池的定义
pool = Poll(5)     #进程池容量
        #pool.apply(func=Foo,args=(n,))  #同步
        pool.apply_async(func=Foo,args=(n,),callback=bar)   #异步，回调函数是bar
（3） 先close再join
    pool.close()
    pool.join()  #进程池中进程执行完毕后再关闭，如果注释，那么程序直接关闭。

协程：用户态实现的真实线程间的切换。
（1）无需线程上下文切换的开销。
（2）无需原子操作锁定及同步的开销。
（3）方便切换控制流，简化编程模型。
（4）高并发+高扩展+低成本：一颗单核CPU支持上万个协程都不是问题。所以很适合用户并发处理。

（5）无法利用多核资源。
（6）进行阻塞操作（如IO阻塞时）会阻塞掉整个程序。

协程的实现：
（1）yeild；生成器原理 实现了协程的效果。
（2）Greenlet ；gr1.swich 不能实现遇到阻塞就切换的目的。
（3）Gevent ；对Greenlet的封装，可实现遇到阻塞就切换的目的。



